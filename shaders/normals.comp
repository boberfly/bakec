#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout (local_size_x = 64) in;

layout(location = 1) uniform uint workOffset;
layout(std430, binding = 2) readonly buffer meshNBuffer { vec3 normals[]; };
layout(std430, binding = 3) readonly buffer coordsBuffer { vec4 coords[]; };
layout(std430, binding = 4) readonly buffer coordsTidxBuffer { uint coords_tidx[]; };
layout(std430, binding = 5) writeonly buffer resultBuffer { float results[]; };

void main()
{
	uint gid = gl_GlobalInvocationID.x + workOffset;

	vec4 coord = coords[gid];
	uint tidx = coords_tidx[gid];
	vec3 n0 = normals[tidx + 0];
	vec3 n1 = normals[tidx + 1];
	vec3 n2 = normals[tidx + 2];
	vec3 normal = normalize(coord.y * n0 + coord.z * n1 + coord.w * n2);

	uint ridx = gid * 3;
	results[ridx + 0] = normal.x;
	results[ridx + 1] = normal.y;
	results[ridx + 2] = normal.z;
}