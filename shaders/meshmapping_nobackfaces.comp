#include "bgfx_compute.sh"
#include "common.sh"

NUM_THREADS(64, 1, 1)

BUFFER_RO(pixels, Pix, 4)
BUFFER_RO(positions, vec3, 5)
BUFFER_RO(bvhs, BVH, 6)
BUFFER_WR(r_coords, vec4, 7)
BUFFER_WR(r_tidx, uint, 8)

vec4 raycast_nobackfaces(vec3 o, vec3 d, vec3 a, vec3 b, vec3 c, float mindist, float maxdist)
{
	vec3 n = normalize(cross(b - a, c - a));
	float nd = dot(d, n);
	if (nd > 0)
	{
		float pn = dot(o, n);
		float t = (dot(a, n) - pn) / nd;
		if (t >= mindist && t < maxdist)
		{
			vec3 p = o + d * t;
			vec3 b = barycentric(p, a, b, c);
			if (b.x >= BARY_MIN && b.y >= BARY_MIN && b.y <= BARY_MAX && b.z >= BARY_MIN && b.z <= BARY_MAX)
			{
				return vec4(t, b.x, b.y, b.z);
			}
		}
	}
	return vec4(FLT_MAX, 0, 0, 0);
}

void raycastRange_nobackfaces(vec3 o, vec3 d, uint start, uint end, float mindist, in out float curdist, in out uint o_idx, in out vec3 o_bcoord)
{
	for (uint tidx = start; tidx < end; tidx += 3)
	{
		vec3 v0 = positions[tidx + 0];
		vec3 v1 = positions[tidx + 1];
		vec3 v2 = positions[tidx + 2];
		vec4 r = raycast_nobackfaces(o, d, v0, v1, v2, mindist, curdist);
		if (r.x != FLT_MAX)
		{
			curdist = r.x;
			o_idx = tidx;
			o_bcoord = r.yzw;
		}
	}
}

void raycastBVH_nobackfaces(vec3 o, vec3 d, in out float curdist, in out uint o_idx, in out vec3 o_bcoord)
{
	uint i = 0;
	while (i < bvhCount)
	{
		BVH bvh = bvhs[i];
		vec3 aabbMin = vec3(bvh.aabbMinX, bvh.aabbMinY, bvh.aabbMinZ);
		vec3 aabbMax = vec3(bvh.aabbMaxX, bvh.aabbMaxY, bvh.aabbMaxZ);
		float distAABB = RayAABB(o, d, aabbMin, aabbMax);
		if (distAABB < curdist)
		{
			raycastRange_nobackfaces(o, d, bvh.start, bvh.end, 0, curdist, o_idx, o_bcoord);
			++i;
		}
		else
		{
			i = bvh.jump;
		}
	}
}

vec4 raycastBack(vec3 o, vec3 d, vec3 a, vec3 b, vec3 c, float mindist, float maxdist)
{
	vec3 n = normalize(cross(b - a, c - a));
	float nd = dot(d, n);
	if (nd < 0)
	{
		float pn = dot(o, n);
		float t = (dot(a, n) - pn) / nd;
		if (t >= mindist && t < maxdist)
		{
			vec3 p = o + d * t;
			vec3 b = barycentric(p, a, b, c);
			if (b.x >= BARY_MIN && b.y >= BARY_MIN && b.y <= BARY_MAX && b.z >= BARY_MIN && b.z <= BARY_MAX)
			{
				return vec4(t, b.x, b.y, b.z);
			}
		}
	}
	return vec4(FLT_MAX, 0, 0, 0);
}

void raycastBackRange(vec3 o, vec3 d, uint start, uint end, float mindist, in out float curdist, in out uint o_idx, in out vec3 o_bcoord)
{
	for (uint tidx = start; tidx < end; tidx += 3)
	{
		vec3 v0 = positions[tidx + 0];
		vec3 v1 = positions[tidx + 1];
		vec3 v2 = positions[tidx + 2];
		vec4 r = raycastBack(o, d, v0, v1, v2, mindist, curdist);
		if (r.x != FLT_MAX)
		{
			curdist = r.x;
			o_idx = tidx;
			o_bcoord = r.yzw;
		}
	}
}

void raycastBackBVH(vec3 o, vec3 d, in out float curdist, in out uint o_idx, in out vec3 o_bcoord)
{
	uint i = 0;
	while (i < bvhCount)
	{
		BVH bvh = bvhs[i];
		vec3 aabbMin = vec3(bvh.aabbMinX, bvh.aabbMinY, bvh.aabbMinZ);
		vec3 aabbMax = vec3(bvh.aabbMaxX, bvh.aabbMaxY, bvh.aabbMaxZ);
		float distAABB = RayAABB(o, d, aabbMin, aabbMax);
		if (distAABB < curdist)
		{
			raycastBackRange(o, d, bvh.start, bvh.end, 0, curdist, o_idx, o_bcoord);
			++i;
		}
		else
		{
			i = bvh.jump;
		}
	}
}

void main()
{
	uint gid = gl_GlobalInvocationID.x + workOffset;
	if (gid >= workCount) return;

	Pix pix = pixels[gid];
	vec3 p = pix.p;
	vec3 d = pix.d;

	uint tidx = 4294967295;
	vec3 bcoord = vec3(0, 0, 0);
	float t = FLT_MAX;
	raycastBVH_nobackfaces(p, d, t, tidx, bcoord);
	raycastBackBVH(p, -d, t, tidx, bcoord);

	r_coords[gid] = vec4(t, bcoord.x, bcoord.y, bcoord.z);
	r_tidx[gid] = tidx;
}
