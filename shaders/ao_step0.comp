#include "bgfx_compute.sh"
#include "common.sh"

NUM_THREADS(64, 1, 1)

struct Output
{
	vec3 o;
	vec3 d;
	vec3 tx;
	vec3 ty;
};

BUFFER_RO(positions, vec3, 2)
BUFFER_RO(normals, vec3, 3)
BUFFER_RO(coords, vec4, 4)
BUFFER_RO(coords_tidx, uint, 5)
BUFFER_WR(outputs, Output, 6)

// Gets the position from the triangle index and the barycentric coordinates
vec3 getPosition(uint tidx, vec3 bcoord)
{
	vec3 p0 = positions[tidx + 0];
	vec3 p1 = positions[tidx + 1];
	vec3 p2 = positions[tidx + 2];
	return bcoord.x * p0 + bcoord.y * p1 + bcoord.z * p2;
}

vec3 getNormal(uint tidx, vec3 bcoord)
{
	vec3 n0 = normals[tidx + 0];
	vec3 n1 = normals[tidx + 1];
	vec3 n2 = normals[tidx + 2];
	return normalize(bcoord.x * n0 + bcoord.y * n1 + bcoord.z * n2);
}

void main()
{ 
	uint in_idx = gl_GlobalInvocationID.x + pixOffset;
	uint out_idx = gl_GlobalInvocationID.x;

	vec4 coord = coords[in_idx];
	uint tidx = coords_tidx[in_idx];

	vec3 o = getPosition(tidx, coord.yzw);
	vec3 d = getNormal(tidx, coord.yzw);
	vec3 ty = normalize(abs(d.x) > abs(d.y) ? vec3(d.z, 0, -d.x) : vec3(0, d.z, -d.y));
	vec3 tx = cross(d, ty);

	outputs[out_idx].o = o;
	outputs[out_idx].d = d;
	outputs[out_idx].tx = tx;
	outputs[out_idx].ty = ty;
}