#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout (local_size_x = 64) in;

struct Output
{
	vec3 o;
	vec3 d;
	vec3 tx;
	vec3 ty;
};

layout(location = 1) uniform uint pixOffset;
layout(std430, binding = 2) readonly buffer meshPBuffer { vec3 positions[]; };
layout(std430, binding = 3) readonly buffer meshNBuffer { vec3 normals[]; };
layout(std430, binding = 4) readonly buffer coordsBuffer { vec4 coords[]; };
layout(std430, binding = 5) readonly buffer coordsTidxBuffer { uint coords_tidx[]; };
layout(std430, binding = 6) writeonly buffer outputBuffer { Output outputs[]; };

// Gets the position from the triangle index and the barycentric coordinates
vec3 getPosition(uint tidx, vec3 bcoord)
{
	vec3 p0 = positions[tidx + 0];
	vec3 p1 = positions[tidx + 1];
	vec3 p2 = positions[tidx + 2];
	return bcoord.x * p0 + bcoord.y * p1 + bcoord.z * p2;
}

vec3 getNormal(uint tidx, vec3 bcoord)
{
	vec3 n0 = normals[tidx + 0];
	vec3 n1 = normals[tidx + 1];
	vec3 n2 = normals[tidx + 2];
	return normalize(bcoord.x * n0 + bcoord.y * n1 + bcoord.z * n2);
}

void main()
{ 
	uint in_idx = gl_GlobalInvocationID.x + pixOffset;
	uint out_idx = gl_GlobalInvocationID.x;

	vec4 coord = coords[in_idx];
	uint tidx = coords_tidx[in_idx];

	vec3 o = getPosition(tidx, coord.yzw);
	vec3 d = getNormal(tidx, coord.yzw);
	vec3 ty = normalize(abs(d.x) > abs(d.y) ? vec3(d.z, 0, -d.x) : vec3(0, d.z, -d.y));
	vec3 tx = cross(d, ty);

	outputs[out_idx].o = o;
	outputs[out_idx].d = d;
	outputs[out_idx].tx = tx;
	outputs[out_idx].ty = ty;
}