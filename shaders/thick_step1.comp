#include "bgfx_compute.sh"
#include "common.sh"

NUM_THREADS(64, 1, 1)

struct Params
{
	uint sampleCount; // Number of rays to sample
	uint samplePermCount;
	float minDistance;
	float maxDistance;
};

struct Input
{
	vec3 o;
	vec3 d;
	vec3 tx;
	vec3 ty;
};

BUFFER_RO(params, Params, 3)
BUFFER_RO(positions, vec3, 4)
BUFFER_RO(bvhs, BVH, 5)
BUFFER_RO(samples, vec3, 6)
BUFFER_RO(inputs, Input, 7)
BUFFER_WR(results, float, 8)

void main()
{ 
	uint in_idx = gl_GlobalInvocationID.x / params.sampleCount;
	uint pix_idx = in_idx + pixOffset;
	uint sample_idx = gl_GlobalInvocationID.x % params.sampleCount;
	uint out_idx = gl_GlobalInvocationID.x;

	Input idata = inputs[in_idx];
	vec3 o = idata.o;
	vec3 d = -idata.d;
	vec3 tx = idata.tx;
	vec3 ty = idata.ty;

	uint sidx = (pix_idx % params.samplePermCount) * params.sampleCount + sample_idx;
	vec3 rs = samples[sidx];
	vec3 sampleDir = normalize(tx * rs.x + ty * rs.y + d * rs.z);

	float t = raycastBVH_dist(o, sampleDir, params.minDistance, params.maxDistance);
	results[out_idx] = (t != FLT_MAX) ? t : params.maxDistance;
}